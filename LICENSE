import pickle
import re
import sys

from PySide6 import QtGui, QtCore
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QFont, QFontMetrics
from PySide6.QtWidgets import QApplication, QMainWindow

# from chatgpt import reply
from new_widget import Set_question
from untitled3 import Ui_MainWindow
from chatharuhi import ChatHaruhi
import os
import collections
from task import Tack_Managet

# os.environ["OPENAI_API_KEY"] = "sk-wNUUhI6W6JrCiRGxxx5xxx"
os.environ["OPENAI_API_KEY"] = "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"


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)


    # 回车绑定发送
    def Event(self):
        if not self.plainTextEdit.isEnabled():  # 这里通过文本框的是否可输入
            self.plainTextEdit.setEnabled(True)
            self.pushButton.click()
            self.plainTextEdit.setFocus()

    # 处理用户和bot发送文本的方法
    def send_text(self, a):


    # 更新bot发送的消息，显示在对话框上面
    def update_bot_text(self, strs):


    def history_(self, history):
        self.history = history
        print(f"历史对话消息为：{history}")

    # 创建气泡
    def user_bot_create_widget(self):


    # 修改气泡长宽
    def set_widget(self, user_bot):

    # 窗口滚动到最底部
    def adjustScrollToMaxValue(self):

    def send_png(self):


# 一个聊天线程，用于获取bot的回复内容。并且会返回一个bot的回复信息
class chat(QThread):
    """
    进行回复
    """
    update_ui_signal = Signal(str)
    update_history_signal = Signal(str)

    def __init__(self, other, *args, **kwargs):


    def run(self):

        self.update_ui_signal.emit(response)
        # 进行处理三值
        self.update_ui_signal.emit(lambda: Tack_Managet.get_history)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = MainWindow()
    win.show()
    win.setStyleSheet("#MainWindow{border-image:url(windows.png)}")

    window = Tack_Managet()
    window.show()

    sys.exit(app.exec())
